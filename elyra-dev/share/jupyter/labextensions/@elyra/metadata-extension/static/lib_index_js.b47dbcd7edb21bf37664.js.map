{"version":3,"file":"lib_index_js.b47dbcd7edb21bf37664.js","mappings":"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","sources":["webpack://@elyra/metadata-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetadataWidget, MetadataEditorWidget } from '@elyra/metadata-common';\nimport { MetadataService } from '@elyra/services';\n\nimport {\n  RequestErrors,\n  PasswordField,\n  CodeBlock,\n  TagsField,\n  DropDown,\n  IErrorResponse\n} from '@elyra/ui-components';\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILabStatus\n} from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { ITranslator } from '@jupyterlab/translation';\nimport {\n  textEditorIcon,\n  LabIcon,\n  IFormRendererRegistry\n} from '@jupyterlab/ui-components';\n\nimport { find } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\n\nconst METADATA_EDITOR_ID = 'elyra-metadata-editor';\nconst METADATA_WIDGET_ID = 'elyra-metadata';\nconst METADATA_EXTENSION_ID = '@elyra/metadata-extension';\n\nconst commandIDs = {\n  openMetadata: 'elyra-metadata:open',\n  closeTabCommand: 'elyra-metadata:close'\n};\n\ninterface IOpenMetadataWidgetArgs {\n  display_name: string;\n  schemaspace: string;\n  icon: string;\n  addLabel?: string;\n}\n\ninterface IOpenMetadataEditorArgs {\n  schema: string;\n  schemaspace: string;\n  name?: string;\n  onSave: () => void;\n  titleContext?: string;\n}\n\n/**\n * Initialization data for the metadata-extension extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: METADATA_WIDGET_ID,\n  autoStart: true,\n  requires: [\n    ICommandPalette,\n    IEditorServices,\n    ILabStatus,\n    IFormRendererRegistry,\n    ITranslator\n  ],\n  activate: async (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    editorServices: IEditorServices,\n    status: ILabStatus,\n    componentRegistry: IFormRendererRegistry,\n    translator: ITranslator\n  ) => {\n    console.log('Elyra - metadata extension is activated!');\n\n    componentRegistry.addRenderer(`${METADATA_EXTENSION_ID}:plugin.code`, {\n      fieldRenderer: (props) => {\n        return CodeBlock(props);\n      }\n    });\n    componentRegistry.addRenderer(`${METADATA_EXTENSION_ID}:plugin.tags`, {\n      fieldRenderer: (props) => {\n        return TagsField(props);\n      }\n    });\n    componentRegistry.addRenderer(`${METADATA_EXTENSION_ID}:plugin.dropdown`, {\n      fieldRenderer: (props) => {\n        return DropDown(props);\n      }\n    });\n    componentRegistry.addRenderer(`${METADATA_EXTENSION_ID}:plugin.password`, {\n      fieldRenderer: (props) => {\n        return PasswordField(props);\n      }\n    });\n\n    const openMetadataEditor = (args: IOpenMetadataEditorArgs): void => {\n      let widgetLabel: string;\n      if (args.name) {\n        widgetLabel = args.name;\n      } else {\n        widgetLabel = `New ${args.schema}`;\n      }\n      const widgetId = `${METADATA_EDITOR_ID}:${args.schemaspace}:${\n        args.schema\n      }:${args.name ? args.name : 'new'}`;\n      const openWidget = find(app.shell.widgets('main'), (widget: Widget) => {\n        return widget.id === widgetId;\n      });\n      if (openWidget) {\n        app.shell.activateById(widgetId);\n        return;\n      }\n\n      const metadataEditorWidget = new MetadataEditorWidget({\n        ...args,\n        schemaName: args.schema,\n        editorServices,\n        status,\n        translator: translator.load('jupyterlab'),\n        componentRegistry\n      });\n      const main = new MainAreaWidget({ content: metadataEditorWidget });\n      main.title.label = widgetLabel;\n      main.id = widgetId;\n      main.title.closable = true;\n      main.title.icon = textEditorIcon;\n      metadataEditorWidget.addClass(METADATA_EDITOR_ID);\n      app.shell.add(main, 'main');\n    };\n\n    app.commands.addCommand(`${METADATA_EDITOR_ID}:open`, {\n      label: (args) => {\n        return `New ${args.title} ${\n          args.appendToTitle ? args.titleContext : ''\n        }`;\n      },\n      execute: (args) => {\n        openMetadataEditor(args as unknown as IOpenMetadataEditorArgs);\n      }\n    });\n\n    const openMetadataWidget = (args: IOpenMetadataWidgetArgs): void => {\n      const labIcon = LabIcon.resolve({ icon: args.icon });\n      const widgetId = `${METADATA_WIDGET_ID}:${args.schemaspace}`;\n      const metadataWidget = new MetadataWidget({\n        app,\n        display_name: args.display_name,\n        schemaspace: args.schemaspace,\n        icon: labIcon,\n        addLabel: args.addLabel\n      });\n      metadataWidget.id = widgetId;\n      metadataWidget.title.icon = labIcon;\n      metadataWidget.title.caption = args.display_name;\n\n      if (\n        find(app.shell.widgets('left'), (value) => value.id === widgetId) ===\n        undefined\n      ) {\n        app.shell.add(metadataWidget, 'left', { rank: 1000 });\n      }\n      app.shell.activateById(widgetId);\n    };\n\n    const openMetadataCommand: string = commandIDs.openMetadata;\n    app.commands.addCommand(openMetadataCommand, {\n      label: (args) => args.label as string,\n      execute: (args) => {\n        // Rank has been chosen somewhat arbitrarily to give priority\n        // to the running sessions widget in the sidebar.\n        openMetadataWidget(args as unknown as IOpenMetadataWidgetArgs);\n      }\n    });\n\n    // Add command to close metadata tab\n    const closeTabCommand: string = commandIDs.closeTabCommand;\n    app.commands.addCommand(closeTabCommand, {\n      label: 'Close Tab',\n      execute: (_args) => {\n        const contextNode: HTMLElement | undefined = app.contextMenuHitTest(\n          (node) => !!node.dataset.id\n        );\n        if (contextNode) {\n          const id = contextNode.dataset['id']!;\n          const widget = find(\n            app.shell.widgets('left'),\n            (widget: Widget, _index: number) => {\n              return widget.id === id;\n            }\n          );\n          if (widget) {\n            widget.dispose();\n          }\n        }\n      }\n    });\n    app.contextMenu.addItem({\n      selector:\n        '[data-id^=\"elyra-metadata:\"]:not([data-id$=\"code-snippets\"]):not([data-id$=\"runtimes\"])',\n      command: closeTabCommand\n    });\n\n    try {\n      const schemas = await MetadataService.getAllSchema();\n\n      if (!schemas) {\n        throw new Error('Failed to retrieve metadata schemas');\n      }\n\n      for (const schema of schemas) {\n        let icon = 'ui-components:text-editor';\n        let title = schema.title;\n        if (schema.uihints) {\n          if (schema.uihints.icon) {\n            icon = schema.uihints.icon;\n          }\n          if (schema.uihints.title) {\n            title = schema.uihints.title;\n          }\n        }\n        palette.addItem({\n          command: commandIDs.openMetadata,\n          args: {\n            label: `Manage ${title}`,\n            display_name: schema.uihints?.title ?? '',\n            schemaspace: schema.schemaspace,\n            icon: icon\n          },\n          category: 'Elyra'\n        });\n      }\n    } catch (error) {\n      await RequestErrors.serverError(error as IErrorResponse);\n    }\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}