{"version":3,"file":"lib_index_js.4b689a70bdd919d0e792.js","mappings":"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","sources":["webpack://@elyra/r-editor-extension/./src/REditor.tsx","webpack://@elyra/r-editor-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ScriptEditor } from '@elyra/script-editor';\nimport { rIcon } from '@elyra/ui-components';\n\nimport { DocumentRegistry, DocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\nimport { LabIcon } from '@jupyterlab/ui-components';\n\nexport class REditor extends ScriptEditor {\n  /**\n   * Construct a new R Editor widget.\n   */\n  constructor(\n    options: DocumentWidget.IOptions<FileEditor, DocumentRegistry.ICodeModel>\n  ) {\n    super(options);\n  }\n  getLanguage(): string {\n    return 'R';\n  }\n\n  getIcon(): LabIcon {\n    return rIcon;\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScriptEditorWidgetFactory, ScriptEditor } from '@elyra/script-editor';\nimport { rIcon } from '@elyra/ui-components';\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\nimport { WidgetTracker, ICommandPalette } from '@jupyterlab/apputils';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport {\n  IDocumentWidget,\n  DocumentRegistry,\n  DocumentWidget\n} from '@jupyterlab/docregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { FileEditor, IEditorTracker } from '@jupyterlab/fileeditor';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { JSONObject } from '@lumino/coreutils';\n\nimport { REditor } from './REditor';\n\nconst R_FACTORY = 'R Editor';\nconst R = 'r';\nconst R_EDITOR_NAMESPACE = 'elyra-r-script-editor-extension';\n\nconst commandIDs = {\n  createNewREditor: 'script-editor:create-new-r-editor',\n  openDocManager: 'docmanager:open',\n  newDocManager: 'docmanager:new-untitled'\n};\n\n/**\n * Initialization data for the r-editor-extension extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: R_EDITOR_NAMESPACE,\n  autoStart: true,\n  requires: [\n    IEditorServices,\n    IEditorTracker,\n    ICommandPalette,\n    ISettingRegistry,\n    IFileBrowserFactory\n  ],\n  optional: [ILayoutRestorer, IMainMenu, ILauncher],\n  activate: (\n    app: JupyterFrontEnd,\n    editorServices: IEditorServices,\n    editorTracker: IEditorTracker,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry,\n    browserFactory: IFileBrowserFactory,\n    restorer: ILayoutRestorer | null,\n    menu: IMainMenu | null,\n    launcher: ILauncher | null\n  ) => {\n    console.log('Elyra - r-editor extension is activated!');\n\n    const factory = new ScriptEditorWidgetFactory({\n      editorServices,\n      factoryOptions: {\n        name: R_FACTORY,\n        fileTypes: [R],\n        defaultFor: [R]\n      },\n      instanceCreator: (\n        options: DocumentWidget.IOptions<\n          FileEditor,\n          DocumentRegistry.ICodeModel\n        >\n      ): ScriptEditor => new REditor(options)\n    });\n\n    app.docRegistry.addFileType({\n      name: R,\n      displayName: 'R File',\n      extensions: ['.r'],\n      pattern: '.*\\\\.r$',\n      mimeTypes: ['text/x-rsrc'],\n      icon: rIcon\n    });\n\n    const { restored } = app;\n\n    /**\n     * Track REditor widget on page refresh\n     */\n    const tracker = new WidgetTracker<ScriptEditor>({\n      namespace: R_EDITOR_NAMESPACE\n    });\n\n    let config: CodeEditor.IOptions['config'] = {};\n\n    if (restorer) {\n      // Handle state restoration\n      void restorer.restore(tracker, {\n        command: commandIDs.openDocManager,\n        args: (widget) => ({\n          path: widget.context.path,\n          factory: R_FACTORY\n        }),\n        name: (widget) => widget.context.path\n      });\n    }\n\n    /**\n     * Update the setting values. Adapted from fileeditor-extension.\n     */\n    const updateSettings = (settings: ISettingRegistry.ISettings): void => {\n      config = {\n        ...(settings.get('editorConfig').composite as JSONObject)\n      };\n      app.commands.notifyCommandChanged();\n    };\n\n    /**\n     * Update the settings of the current tracker instances. Adapted from fileeditor-extension.\n     */\n    const updateTracker = (): void => {\n      tracker.forEach((widget) => {\n        updateWidget(widget);\n      });\n    };\n\n    /**\n     * Update the settings of a widget. Adapted from fileeditor-extension.\n     */\n    const updateWidget = (widget: ScriptEditor): void => {\n      if (!editorTracker.has(widget)) {\n        (editorTracker as WidgetTracker<IDocumentWidget<FileEditor>>).add(\n          widget\n        );\n      }\n\n      const editor = widget.content.editor;\n      const editorConfigOptions = config || {};\n\n      Object.keys(editorConfigOptions).forEach((key) => {\n        const optionValue = editorConfigOptions[key];\n        if (optionValue !== undefined) {\n          editor.setOption(key, optionValue);\n        }\n      });\n    };\n\n    // Fetch the initial state of the settings. Adapted from fileeditor-extension.\n    Promise.all([\n      settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n      restored\n    ])\n      .then(([settings]) => {\n        updateSettings(settings);\n        updateTracker();\n        settings.changed.connect(() => {\n          updateSettings(settings);\n          updateTracker();\n        });\n      })\n      .catch((reason: Error) => {\n        console.error(reason.message);\n        updateTracker();\n      });\n\n    app.docRegistry.addWidgetFactory(factory);\n\n    factory.widgetCreated.connect((sender, widget) => {\n      void tracker.add(widget);\n\n      // Notify the widget tracker if restore data needs to update\n      widget.context.pathChanged.connect(() => {\n        void tracker.save(widget);\n      });\n      updateWidget(widget);\n    });\n\n    // Handle the settings of new widgets. Adapted from fileeditor-extension.\n    tracker.widgetAdded.connect((sender, widget) => {\n      updateWidget(widget);\n    });\n\n    /**\n     * Create new r editor from launcher and file menu\n     */\n\n    // Add a r launcher\n    if (launcher) {\n      launcher.add({\n        command: commandIDs.createNewREditor,\n        category: 'Elyra',\n        rank: 5\n      });\n    }\n\n    if (menu) {\n      // Add new r file creation to the file menu\n      menu.fileMenu.newMenu.addGroup(\n        [{ command: commandIDs.createNewREditor, args: { isMenu: true } }],\n        93\n      );\n    }\n\n    // Function to create a new untitled r file, given the current working directory\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- `app.commands.execute` returns a Promise<any>\n    const createNew = (cwd: string): Promise<any> => {\n      return app.commands\n        .execute(commandIDs.newDocManager, {\n          path: cwd,\n          type: 'file',\n          ext: '.r'\n        })\n        .then((model) => {\n          return app.commands.execute(commandIDs.openDocManager, {\n            path: model.path,\n            factory: R_FACTORY\n          });\n        });\n    };\n\n    // Add a command to create new R editor\n    app.commands.addCommand(commandIDs.createNewREditor, {\n      label: (args) => (args['isPalette'] ? 'New R Editor' : 'R Editor'),\n      caption: 'Create a new R Editor',\n      icon: (args) => (args['isPalette'] ? undefined : rIcon),\n      execute: (args) => {\n        //Use file browser's current path instead of defaultBrowser.model.path\n        const fileBrowser = browserFactory.createFileBrowser('myFileBrowser');\n        const cwd = args['cwd'] ? String(args['cwd']) : fileBrowser.model.path;\n        return createNew(cwd);\n      }\n    });\n\n    palette.addItem({\n      command: commandIDs.createNewREditor,\n      args: { isPalette: true },\n      category: 'Elyra'\n    });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}