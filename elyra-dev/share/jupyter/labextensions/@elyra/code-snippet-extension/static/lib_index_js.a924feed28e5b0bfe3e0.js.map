{"version":3,"file":"lib_index_js.a924feed28e5b0bfe3e0.js","mappings":"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","sources":["webpack://@elyra/code-snippet-extension/./src/CodeSnippetService.ts","webpack://@elyra/code-snippet-extension/./src/CodeSnippetWidget.tsx","webpack://@elyra/code-snippet-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IMetadataResource, MetadataService } from '@elyra/services';\n\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\n\nexport const CODE_SNIPPET_SCHEMASPACE = 'code-snippets';\nexport const CODE_SNIPPET_SCHEMA = 'code-snippet';\n\nexport class CodeSnippetService {\n  static async findAll(): Promise<IMetadataResource[]> {\n    return (await MetadataService.getMetadata(CODE_SNIPPET_SCHEMASPACE)) ?? [];\n  }\n\n  // TODO: Test this function\n  static async findByLanguage(language: string): Promise<IMetadataResource[]> {\n    try {\n      const allCodeSnippets = await this.findAll();\n      const codeSnippetsByLanguage: IMetadataResource[] = [];\n\n      for (const codeSnippet of allCodeSnippets) {\n        if (codeSnippet.metadata.language === language) {\n          codeSnippetsByLanguage.push(codeSnippet);\n        }\n      }\n\n      return codeSnippetsByLanguage;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Opens a dialog to confirm that the given code snippet\n   * should be deleted, then sends a delete request to the metadata server.\n   *\n   * @param codeSnippet: code snippet to be deleted\n   *\n   * @returns A boolean promise that is true if the dialog confirmed\n   * the deletion, and false if the deletion was cancelled.\n   */\n  static deleteCodeSnippet(codeSnippet: IMetadataResource): Promise<boolean> {\n    return showDialog({\n      title: `Delete snippet '${codeSnippet.display_name}'?`,\n      buttons: [Dialog.cancelButton(), Dialog.okButton()]\n    }).then((result) => {\n      // Do nothing if the cancel button is pressed\n      if (result.button.accept) {\n        return MetadataService.deleteMetadata(\n          CODE_SNIPPET_SCHEMASPACE,\n          codeSnippet.name\n        ).then(() => true);\n      } else {\n        return false;\n      }\n    });\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '../style/index.css';\n\nimport {\n  IMetadataActionButton,\n  IMetadataDisplayProps,\n  IMetadataWidgetProps,\n  MetadataCommonService,\n  MetadataDisplay,\n  MetadataWidget,\n  METADATA_ITEM\n} from '@elyra/metadata-common';\nimport { IMetadataResource } from '@elyra/services';\nimport {\n  ExpandableComponent,\n  importIcon,\n  RequestErrors,\n  trashIcon\n} from '@elyra/ui-components';\n\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, Dialog, showDialog } from '@jupyterlab/apputils';\nimport {\n  CodeCell,\n  MarkdownCell,\n  ICodeCellModel,\n  IMarkdownCellModel\n} from '@jupyterlab/cells';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { EditorLanguageRegistry } from '@jupyterlab/codemirror';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\nimport {\n  copyIcon,\n  editIcon,\n  pasteIcon,\n  LabIcon\n} from '@jupyterlab/ui-components';\n\nimport { find } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { Widget } from '@lumino/widgets';\n\nimport React from 'react';\n\nimport {\n  CodeSnippetService,\n  CODE_SNIPPET_SCHEMASPACE,\n  CODE_SNIPPET_SCHEMA\n} from './CodeSnippetService';\n\nconst METADATA_EDITOR_ID = 'elyra-metadata-editor';\nconst SNIPPET_DRAG_IMAGE_CLASS = 'elyra-codeSnippet-drag-image';\nconst CODE_SNIPPETS_METADATA_CLASS = 'elyra-metadata-code-snippets';\n\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n\n/**\n * CodeSnippetDisplay props.\n */\ninterface ICodeSnippetDisplayProps extends IMetadataDisplayProps {\n  getCurrentWidget: () => Widget | null;\n  editorServices: IEditorServices;\n  shell: JupyterFrontEnd.IShell;\n}\n\n/**\n * A React Component for code-snippets display list.\n */\nclass CodeSnippetDisplay extends MetadataDisplay<ICodeSnippetDisplayProps> {\n  editors: { [codeSnippetId: string]: CodeEditor.IEditor } = {};\n\n  constructor(props: ICodeSnippetDisplayProps) {\n    super(props);\n    this._drag = null;\n    this._dragData = null;\n    this.handleDragMove = this.handleDragMove.bind(this);\n    this._evtMouseUp = this._evtMouseUp.bind(this);\n  }\n\n  // Handle code snippet insertion into an editor\n  private insertCodeSnippet = async (\n    snippet: IMetadataResource\n  ): Promise<void> => {\n    const widget = this.props.getCurrentWidget();\n    const codeSnippet = this.extractMetadataCodeSnippet(snippet);\n    const snippetLanguage = this.extractMetadataLanguage(snippet);\n\n    if (widget === null) {\n      return;\n    }\n\n    if (this.isFileEditor(widget)) {\n      const fileEditor = widget.content.editor;\n      const markdownRegex = /^\\.(md|mkdn?|mdown|markdown)$/;\n      const editorLanguage = this.getEditorLanguage(widget);\n\n      if (\n        PathExt.extname(widget.context.path).match(markdownRegex) !== null &&\n        snippetLanguage.toLowerCase() !== 'markdown'\n      ) {\n        fileEditor.replaceSelection?.(\n          this.addMarkdownCodeBlock(snippetLanguage, codeSnippet)\n        );\n      } else if (editorLanguage) {\n        await this.verifyLanguageAndInsert(snippet, editorLanguage, fileEditor);\n      } else {\n        fileEditor.replaceSelection?.(codeSnippet);\n      }\n    } else if (widget instanceof NotebookPanel) {\n      const notebookWidget: NotebookPanel = widget as NotebookPanel;\n      const notebookCell = (notebookWidget.content as Notebook).activeCell;\n\n      if (notebookCell === null) {\n        return;\n      }\n\n      const notebookCellEditor = notebookCell.editor;\n\n      if (notebookCellEditor !== null) {\n        if (notebookCell instanceof CodeCell) {\n          const kernelInfo =\n            await notebookWidget.sessionContext.session?.kernel?.info;\n          const kernelLanguage: string = kernelInfo?.language_info.name || '';\n          await this.verifyLanguageAndInsert(\n            snippet,\n            kernelLanguage,\n            notebookCellEditor\n          );\n        } else if (\n          notebookCell instanceof MarkdownCell &&\n          snippetLanguage.toLowerCase() !== 'markdown'\n        ) {\n          notebookCellEditor.replaceSelection?.(\n            this.addMarkdownCodeBlock(snippetLanguage, codeSnippet)\n          );\n        } else {\n          notebookCellEditor.replaceSelection?.(codeSnippet);\n        }\n\n        const notebookContent = notebookWidget.content;\n        const activeCellIndex = notebookContent.activeCellIndex ?? -1;\n\n        const contentFactory = new NotebookPanel.ContentFactory({\n          editorFactory:\n            this.props.editorServices.factoryService.newInlineEditor\n        });\n\n        /*\n          interface CodeCellCreatorOption {\n          model: ICodeCellModel | undefined;\n          rendermime: RenderMimeRegistry;\n          contentFactory: any;\n          cell_type: string;\n        }\n        */\n\n        const options: CodeCell.IOptions = {\n          model: notebookContent.activeCell?.model as ICodeCellModel,\n          rendermime: notebookContent.rendermime,\n          contentFactory: contentFactory\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- API mismatch\n        const codeCell: any = contentFactory.createCodeCell(options);\n        codeCell.cell_type = 'code';\n        //insert the new code cell into the notebook at the specified index\n\n        // codeCell: CodeCell\n        // codeCell: SharedCell.Cell\n        widget.content.model?.sharedModel.insertCell(\n          activeCellIndex,\n          codeCell as Partial<nbformat.ICodeCell> & { cell_type: string }\n        );\n\n        //update the active cell index to the newly inserted cell\n        notebookWidget.content.activeCellIndex = activeCellIndex + 1;\n      } else {\n        this.showErrDialog('notebookCellEditor have to be not null');\n      }\n    } else {\n      this.showErrDialog('Code snippet insert failed: Unsupported widget');\n    }\n  };\n\n  // Verify if a given widget is a FileEditor\n  private isFileEditor = (\n    widget: Widget\n  ): widget is DocumentWidget<FileEditor> => {\n    return (widget as DocumentWidget).content instanceof FileEditor;\n  };\n\n  // Return the language of the editor or empty string\n  private getEditorLanguage = (\n    widget: DocumentWidget<FileEditor>\n  ): string | undefined => {\n    const editorLanguage = EditorLanguageRegistry.getDefaultLanguages().find(\n      (language) => language.mime.includes(widget.content.model.mimeType)\n    );\n    return editorLanguage?.displayName ?? '';\n  };\n\n  // Return the given code wrapped in a markdown code block\n  private addMarkdownCodeBlock = (language: string, code: string): string => {\n    return '```' + language + '\\n' + code + '\\n```';\n  };\n\n  // Handle language compatibility between code snippet and editor\n  private verifyLanguageAndInsert = async (\n    snippet: IMetadataResource,\n    editorLanguage: string,\n    editor: CodeEditor.IEditor\n  ): Promise<void> => {\n    const codeSnippet = this.extractMetadataCodeSnippet(snippet);\n    const snippetLanguage = this.extractMetadataLanguage(snippet);\n    if (\n      editorLanguage &&\n      snippetLanguage.toLowerCase() !== editorLanguage.toLowerCase()\n    ) {\n      const result = await this.showWarnDialog(\n        editorLanguage,\n        snippet.display_name\n      );\n      if (result.button.accept) {\n        editor.replaceSelection?.(codeSnippet);\n      }\n    } else {\n      // Language match or editorLanguage is unavailable\n      editor.replaceSelection?.(codeSnippet);\n    }\n  };\n\n  // Display warning dialog when inserting a code snippet incompatible with editor's language\n  private showWarnDialog = async (\n    editorLanguage: string,\n    snippetName: string\n  ): Promise<Dialog.IResult<string>> => {\n    return showDialog({\n      title: 'Warning',\n      body: `Code snippet \"${snippetName}\" is incompatible with ${editorLanguage}. Continue?`,\n      buttons: [Dialog.cancelButton(), Dialog.okButton()]\n    });\n  };\n\n  // Display error dialog when inserting a code snippet into unsupported widget (i.e. not an editor)\n  private showErrDialog = (errMsg: string): Promise<Dialog.IResult<string>> => {\n    return showDialog({\n      title: 'Error',\n      body: errMsg,\n      buttons: [Dialog.okButton()]\n    });\n  };\n\n  // Initial setup to handle dragging a code snippet\n  private handleDragSnippet(\n    event: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n    metadata: IMetadataResource\n  ): void {\n    const { button } = event;\n\n    // do nothing if left mouse button is clicked\n    if (button !== 0) {\n      return;\n    }\n\n    this._dragData = {\n      pressX: event.clientX,\n      pressY: event.clientY,\n      dragImage: null\n    };\n\n    const mouseUpListener = (event: MouseEvent): void => {\n      this._evtMouseUp(event, metadata, mouseMoveListener);\n    };\n    const mouseMoveListener = (event: MouseEvent): void => {\n      this.handleDragMove(event, metadata, mouseMoveListener, mouseUpListener);\n    };\n\n    const target = event.target as HTMLElement;\n    target.addEventListener('mouseup', mouseUpListener, {\n      once: true,\n      capture: true\n    });\n    target.addEventListener('mousemove', mouseMoveListener, true);\n\n    // since a browser has its own drag'n'drop support for images and some other elements.\n    target.ondragstart = (): boolean => false;\n  }\n\n  private _evtMouseUp(\n    event: MouseEvent,\n    _metadata: IMetadataResource,\n    mouseMoveListener: (event: MouseEvent) => void\n  ): void {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const target = event.target as HTMLElement;\n    target.removeEventListener('mousemove', mouseMoveListener, true);\n  }\n\n  private handleDragMove(\n    event: MouseEvent,\n    metadata: IMetadataResource,\n    mouseMoveListener: (event: MouseEvent) => void,\n    mouseUpListener: (event: MouseEvent) => void\n  ): void {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const data = this._dragData;\n\n    if (\n      data &&\n      this.shouldStartDrag(\n        data.pressX,\n        data.pressY,\n        event.clientX,\n        event.clientY\n      )\n    ) {\n      // Create drag image\n      const element = document.createElement('div');\n      element.innerHTML = this.getDisplayName(metadata);\n      element.classList.add(SNIPPET_DRAG_IMAGE_CLASS);\n      data.dragImage = element;\n\n      // Remove mouse listeners and start the drag.\n      const target = event.target as HTMLElement;\n      target.removeEventListener('mousemove', mouseMoveListener, true);\n      target.removeEventListener('mouseup', mouseUpListener, true);\n\n      void this.startDrag(\n        data.dragImage,\n        metadata,\n        event.clientX,\n        event.clientY\n      );\n    }\n  }\n\n  private extractMetadataCodeSnippet = (\n    metadata: IMetadataResource\n  ): string => {\n    const codeLines = (metadata.metadata.code as string[] | undefined) ?? [];\n    return codeLines.join('\\n');\n  };\n\n  private extractMetadataLanguage = (metadata: IMetadataResource): string => {\n    return (metadata.metadata.language as string | undefined) ?? 'Unknown';\n  };\n\n  private extractMetadataDescription = (\n    metadata: IMetadataResource\n  ): string => {\n    return (metadata.metadata.description as string | undefined) ?? '';\n  };\n\n  /**\n   * Detect if a drag event should be started. This is down if the\n   * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n   *\n   * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n   * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n   * @param nextX - Current X Coordinate of the mouse pointer\n   * @param nextY - Current Y Coordinate of the mouse pointer\n   */\n  private shouldStartDrag(\n    prevX: number,\n    prevY: number,\n    nextX: number,\n    nextY: number\n  ): boolean {\n    const dx = Math.abs(nextX - prevX);\n    const dy = Math.abs(nextY - prevY);\n    return dx >= 0 || dy >= DRAG_THRESHOLD;\n  }\n\n  private async startDrag(\n    dragImage: HTMLElement,\n    metadata: IMetadataResource,\n    clientX: number,\n    clientY: number\n  ): Promise<void> {\n    const widget: NotebookPanel =\n      this.props.getCurrentWidget() as NotebookPanel;\n\n    const notebookContent = widget.content;\n    //const activeCellIndex = notebookContent.activeCellIndex ?? -1;\n\n    const contentFactory = new NotebookPanel.ContentFactory({\n      editorFactory: this.props.editorServices.factoryService.newInlineEditor\n    });\n\n    const options: CodeCell.IOptions = {\n      model: notebookContent.activeCell?.model as ICodeCellModel,\n      rendermime: notebookContent.rendermime,\n      contentFactory: contentFactory\n    };\n\n    const options2: MarkdownCell.IOptions = {\n      model: notebookContent.activeCell?.model as IMarkdownCellModel,\n      rendermime: notebookContent.rendermime,\n      contentFactory: contentFactory\n    };\n\n    const codeCell = contentFactory.createCodeCell(options);\n\n    const markdownCell = contentFactory.createMarkdownCell(options2);\n\n    const language = this.extractMetadataLanguage(metadata);\n    const model =\n      language.toLowerCase() !== 'markdown' ? codeCell : markdownCell;\n\n    const content = this.extractMetadataCodeSnippet(metadata);\n\n    if (language.toLowerCase() !== 'markdown') {\n      if (model.model.type === 'code') {\n        (model.model as ICodeCellModel).sharedModel.setSource(content);\n      } else {\n        // Handle other cases if needed\n      }\n    }\n    if (language.toLowerCase() === 'markdown') {\n      if (model.model.type === 'markdown') {\n        (model.model as IMarkdownCellModel).sharedModel.setSource(content);\n      } else {\n        // Handle other cases if needed\n      }\n    }\n\n    this._drag = new Drag({\n      mimeData: new MimeData(),\n      dragImage: dragImage,\n      supportedActions: 'copy-move',\n      proposedAction: 'copy',\n      source: this\n    });\n\n    const selected: nbformat.ICell[] = [model.model.toJSON()];\n    this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n    this._drag.mimeData.setData('text/plain', content);\n\n    return this._drag.start(clientX, clientY).then(() => {\n      this._drag = null;\n      this._dragData = null;\n    });\n  }\n\n  actionButtons = (metadata: IMetadataResource): IMetadataActionButton[] => {\n    return [\n      {\n        title: 'Copy to clipboard',\n        icon: pasteIcon,\n        feedback: 'Copied!',\n        onClick: (): void => {\n          Clipboard.copyToSystem(this.extractMetadataCodeSnippet(metadata));\n        }\n      },\n      {\n        title: 'Insert',\n        icon: importIcon,\n        onClick: (): void => {\n          this.insertCodeSnippet(metadata);\n        }\n      },\n      {\n        title: 'Edit',\n        icon: editIcon,\n        onClick: (): void => {\n          this.props.openMetadataEditor({\n            onSave: this.props.updateMetadata,\n            schemaspace: CODE_SNIPPET_SCHEMASPACE,\n            schema: CODE_SNIPPET_SCHEMA,\n            name: metadata.name\n          });\n        }\n      },\n      {\n        title: 'Duplicate',\n        icon: copyIcon,\n        onClick: (): void => {\n          MetadataCommonService.duplicateMetadataInstance(\n            CODE_SNIPPET_SCHEMASPACE,\n            metadata,\n            this.props.metadata\n          )\n            .then((_response): void => {\n              this.props.updateMetadata();\n            })\n            .catch(async (error) => {\n              await RequestErrors.serverError(error);\n            });\n        }\n      },\n      {\n        title: 'Delete',\n        icon: trashIcon,\n        onClick: (): void => {\n          CodeSnippetService.deleteCodeSnippet(metadata)\n            .then((deleted: boolean): void => {\n              if (deleted) {\n                this.props.updateMetadata();\n                delete this.editors[metadata.name];\n                const editorWidget = find(\n                  this.props.shell.widgets('main'),\n                  (value: Widget, index: number) => {\n                    return (\n                      value.id ===\n                      `${METADATA_EDITOR_ID}:${CODE_SNIPPET_SCHEMASPACE}:${CODE_SNIPPET_SCHEMA}:${metadata.name}`\n                    );\n                  }\n                );\n                if (editorWidget) {\n                  editorWidget.dispose();\n                }\n              }\n            })\n            .catch(async (error) => {\n              await RequestErrors.serverError(error);\n            });\n        }\n      }\n    ];\n  };\n\n  getDisplayName(metadata: IMetadataResource): string {\n    const language = this.extractMetadataLanguage(metadata);\n    return `[${language}] ${metadata.display_name}`;\n  }\n\n  sortMetadata(): void {\n    this.props.metadata.sort((a, b) =>\n      this.getDisplayName(a).localeCompare(this.getDisplayName(b))\n    );\n  }\n\n  matchesSearch(searchValue: string, metadata: IMetadataResource): boolean {\n    searchValue = searchValue.toLowerCase();\n    // True if search string is in name, display_name, or language of snippet\n    // or if the search string is empty\n    return (\n      metadata.name.toLowerCase().includes(searchValue) ||\n      metadata.display_name.toLowerCase().includes(searchValue) ||\n      this.extractMetadataLanguage(metadata).toLowerCase().includes(searchValue)\n    );\n  }\n\n  // Render display of a code snippet\n  renderMetadata = (metadata: IMetadataResource): JSX.Element => {\n    return (\n      <div\n        key={metadata.name}\n        data-item-id={metadata.display_name}\n        className={METADATA_ITEM}\n        style={\n          this.state.metadata.includes(metadata) ? {} : { display: 'none' }\n        }\n      >\n        <ExpandableComponent\n          displayName={this.getDisplayName(metadata)}\n          tooltip={this.extractMetadataDescription(metadata)}\n          actionButtons={this.actionButtons(metadata)}\n          onExpand={(): void => {\n            this.editors[metadata.name].redo();\n          }}\n          onMouseDown={(\n            event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n          ): void => {\n            this.handleDragSnippet(event, metadata);\n          }}\n        >\n          <div id={metadata.name}></div>\n        </ExpandableComponent>\n      </div>\n    );\n  };\n\n  createPreviewEditors = (): void => {\n    const editorFactory =\n      this.props.editorServices.factoryService.newInlineEditor;\n    this.props.metadata.map((codeSnippet: IMetadataResource) => {\n      const content = this.extractMetadataCodeSnippet(codeSnippet);\n\n      if (codeSnippet.name in this.editors) {\n        // Make sure code is up to date\n        this.editors[codeSnippet.name].model.sharedModel.setSource(content);\n      } else {\n        // Add new snippets\n        const snippetElement = document.getElementById(codeSnippet.name);\n        if (snippetElement === null) {\n          return;\n        }\n\n        const language = this.extractMetadataLanguage(codeSnippet);\n\n        const mimeType =\n          this.props.editorServices.mimeTypeService.getMimeTypeByLanguage({\n            value: content,\n            name: language,\n            codemirror_mode: language\n          });\n\n        const newEditor = editorFactory({\n          config: { readOnly: true },\n          host: snippetElement,\n          model: new CodeEditor.Model({ mimeType })\n        });\n        newEditor.model.sharedModel.setSource(content);\n        this.editors[codeSnippet.name] = newEditor;\n      }\n    });\n  };\n\n  componentDidMount(): void {\n    this.createPreviewEditors();\n  }\n\n  componentDidUpdate(): void {\n    this.createPreviewEditors();\n  }\n\n  private _drag: Drag | null;\n  private _dragData: {\n    pressX: number;\n    pressY: number;\n    dragImage: HTMLElement | null;\n  } | null;\n}\n\n/**\n * CodeSnippetWidget props.\n */\nexport interface ICodeSnippetWidgetProps extends IMetadataWidgetProps {\n  app: JupyterFrontEnd;\n  display_name: string;\n  schemaspace: string;\n  schema: string;\n  icon: LabIcon;\n  getCurrentWidget: () => Widget | null;\n  editorServices: IEditorServices;\n}\n\n/**\n * A widget for Code Snippets.\n */\nexport class CodeSnippetWidget extends MetadataWidget {\n  constructor(public props: ICodeSnippetWidgetProps) {\n    super(props);\n  }\n\n  // Request code snippets from server\n  async fetchMetadata(): Promise<IMetadataResource[]> {\n    return CodeSnippetService.findAll().catch(async (error) => {\n      await RequestErrors.serverError(error);\n      return [];\n    });\n  }\n\n  renderDisplay(metadata: IMetadataResource[]): React.ReactElement {\n    if (Array.isArray(metadata) && !metadata.length) {\n      // Empty metadata\n      return (\n        <div>\n          <br />\n          <h6 className=\"elyra-no-metadata-msg\">\n            Click the + button to add {this.props.display_name.toLowerCase()}\n          </h6>\n        </div>\n      );\n    }\n\n    return (\n      <CodeSnippetDisplay\n        metadata={metadata}\n        openMetadataEditor={this.openMetadataEditor}\n        updateMetadata={this.updateMetadata}\n        schemaspace={CODE_SNIPPET_SCHEMASPACE}\n        getCurrentWidget={this.props.getCurrentWidget}\n        className={CODE_SNIPPETS_METADATA_CLASS}\n        editorServices={this.props.editorServices}\n        shell={this.props.app.shell}\n        sortMetadata={true}\n      />\n    );\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '../style/index.css';\n\nimport { codeSnippetIcon } from '@elyra/ui-components';\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { Cell } from '@jupyterlab/cells';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\nimport { MarkdownDocument } from '@jupyterlab/markdownviewer';\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\nimport { Widget } from '@lumino/widgets';\n\nimport {\n  CODE_SNIPPET_SCHEMASPACE,\n  CODE_SNIPPET_SCHEMA\n} from './CodeSnippetService';\nimport { CodeSnippetWidget } from './CodeSnippetWidget';\n\nconst CODE_SNIPPET_EXTENSION_ID = 'elyra-code-snippet-extension';\n\nconst commandIDs = {\n  saveAsSnippet: 'codesnippet:save-as-snippet'\n};\n\n/**\n * Initialization data for the code-snippet extension.\n */\nexport const code_snippet_extension: JupyterFrontEndPlugin<void> = {\n  id: CODE_SNIPPET_EXTENSION_ID,\n  autoStart: true,\n  requires: [ICommandPalette, ILayoutRestorer, IEditorServices],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    restorer: ILayoutRestorer,\n    editorServices: IEditorServices\n  ) => {\n    console.log('Elyra - code-snippet extension is activated!');\n\n    const getCurrentWidget = (): Widget | null => {\n      return app.shell.currentWidget;\n    };\n\n    const codeSnippetWidget = new CodeSnippetWidget({\n      app,\n      display_name: 'Code Snippets',\n      schemaspace: CODE_SNIPPET_SCHEMASPACE,\n      schema: CODE_SNIPPET_SCHEMA,\n      icon: codeSnippetIcon,\n      getCurrentWidget,\n      editorServices,\n      titleContext: '',\n      addLabel: 'code snippet'\n    });\n    const codeSnippetWidgetId = `elyra-metadata:${CODE_SNIPPET_SCHEMASPACE}`;\n    codeSnippetWidget.id = codeSnippetWidgetId;\n    codeSnippetWidget.title.icon = codeSnippetIcon;\n    codeSnippetWidget.title.caption = 'Code Snippets';\n\n    restorer.add(codeSnippetWidget, codeSnippetWidgetId);\n\n    // Rank has been chosen somewhat arbitrarily to give priority to the running\n    // sessions widget in the sidebar.\n    app.shell.add(codeSnippetWidget, 'left', { rank: 900 });\n\n    app.commands.addCommand(commandIDs.saveAsSnippet, {\n      label: 'Save As Code Snippet',\n      isEnabled: () => {\n        const currentWidget = app.shell.currentWidget;\n        const editor = getEditor(currentWidget);\n        let selection = '';\n\n        if (editor) {\n          selection = getTextSelection(editor);\n        } else if (isMarkdownDocument(currentWidget)) {\n          selection = document.getSelection()?.toString() ?? '';\n        }\n\n        if (selection.length > 0) {\n          return true;\n        }\n\n        if (isNotebookEditor(currentWidget)) {\n          if (getSelectedCellContents().length > 0) {\n            return true;\n          }\n        }\n\n        return false;\n      },\n      isVisible: () => true,\n      execute: () => {\n        const currentWidget = app.shell.currentWidget;\n        const editor = getEditor(currentWidget);\n        let selection = '';\n\n        if (editor) {\n          selection = getTextSelection(editor);\n        } else if (isMarkdownDocument(currentWidget)) {\n          selection = document.getSelection()?.toString() ?? '';\n        }\n\n        if (selection.length > 0) {\n          codeSnippetWidget.openMetadataEditor({\n            schemaspace: CODE_SNIPPET_SCHEMASPACE,\n            schema: CODE_SNIPPET_SCHEMA,\n            code: selection.split('\\n'),\n            onSave: codeSnippetWidget.updateMetadata\n          });\n        } else {\n          const selectedCells = getSelectedCellContents();\n          const code = selectedCells.join('\\n\\n').split('\\n');\n\n          codeSnippetWidget.openMetadataEditor({\n            schemaspace: CODE_SNIPPET_SCHEMASPACE,\n            schema: CODE_SNIPPET_SCHEMA,\n            code: code,\n            onSave: codeSnippetWidget.updateMetadata\n          });\n        }\n      }\n    });\n\n    app.contextMenu.addItem({\n      command: commandIDs.saveAsSnippet,\n      selector: '.jp-Cell'\n    });\n\n    app.contextMenu.addItem({\n      command: commandIDs.saveAsSnippet,\n      selector: '.jp-FileEditor'\n    });\n\n    app.contextMenu.addItem({\n      command: commandIDs.saveAsSnippet,\n      selector: '.jp-MarkdownViewer'\n    });\n\n    const getTextSelection = (\n      editor: CodeEditor.IEditor,\n      markdownPreview?: boolean\n    ): string => {\n      const selectionObj = editor.getSelection();\n      const start = editor.getOffsetAt(selectionObj.start);\n      const end = editor.getOffsetAt(selectionObj.end);\n      const source = editor.model.sharedModel.getSource();\n      const selection = source.substring(start, end);\n\n      if (!selection && source) {\n        // Allow selections from a rendered notebook cell\n        return document.getSelection()?.toString() ?? '';\n      }\n\n      return selection;\n    };\n\n    const getSelectedCellContents = (): string[] => {\n      const currentWidget = app.shell.currentWidget;\n      const notebookWidget = currentWidget as NotebookPanel;\n      const notebook = notebookWidget.content as Notebook;\n      const notebookCell = notebook.activeCell;\n      const selectedCells: string[] = [];\n\n      if (notebookCell) {\n        const allCells = notebook.widgets;\n\n        allCells.forEach((cell: Cell) => {\n          if (notebook.isSelectedOrActive(cell)) {\n            const contents: string = cell.model.toJSON().source.toString();\n\n            if (contents.length > 0) selectedCells.push(contents);\n          }\n        });\n      }\n\n      return selectedCells;\n    };\n\n    const isFileEditor = (currentWidget: Widget | null): boolean => {\n      return (\n        currentWidget instanceof DocumentWidget &&\n        (currentWidget as DocumentWidget).content instanceof FileEditor\n      );\n    };\n\n    const isNotebookEditor = (currentWidget: Widget | null): boolean => {\n      return currentWidget instanceof NotebookPanel;\n    };\n\n    const isMarkdownDocument = (currentWidget: Widget | null): boolean => {\n      return currentWidget instanceof MarkdownDocument;\n    };\n\n    const getEditor = (\n      currentWidget: Widget | null\n    ): CodeEditor.IEditor | null | undefined => {\n      if (isFileEditor(currentWidget)) {\n        const documentWidget = currentWidget as DocumentWidget;\n        return (documentWidget.content as FileEditor).editor;\n      } else if (isNotebookEditor(currentWidget)) {\n        const notebookWidget = currentWidget as NotebookPanel;\n        const notebookCell = (notebookWidget.content as Notebook).activeCell;\n        return notebookCell?.editor;\n      }\n      return undefined;\n    };\n  }\n};\n\nexport default code_snippet_extension;\n"],"names":[],"sourceRoot":""}