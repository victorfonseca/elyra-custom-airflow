{"version":3,"file":"lib_index_js.a4dad4b5e1e4ae93e1b7.js","mappings":"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","sources":["webpack://@elyra/services/./src/index.ts","webpack://@elyra/services/./src/metadata.ts","webpack://@elyra/services/./src/parsing.ts","webpack://@elyra/services/./src/requests.ts","webpack://@elyra/services/./src/types.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '../style/index.css';\n\nexport * from './parsing';\nexport * from './metadata';\nexport * from './requests';\nexport * from './types';\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IDictionary } from './parsing';\nimport { RequestHandler } from './requests';\nimport {\n  IMetadataResource,\n  IMetadataResourceBody,\n  IMetadataSchemaspaceResource,\n  ISchemaResource,\n  ISchemaSchemaspaceResource,\n  ISchemaspacesResource\n} from './types';\n\nconst ELYRA_METADATA_API_ENDPOINT = 'elyra/metadata/';\nconst ELYRA_SCHEMA_API_ENDPOINT = 'elyra/schema/';\nconst ELYRA_SCHEMASPACE_API_ENDPOINT = 'elyra/schemaspace';\n\n/**\n * A service class for accessing the elyra api.\n */\nexport class MetadataService {\n  /**\n   * Service function for making GET calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   *\n   * @returns a promise that resolves with the requested metadata or\n   * an error dialog result\n   */\n  static async getMetadata(\n    schemaspace: string\n  ): Promise<IMetadataResource[] | undefined> {\n    return RequestHandler.makeGetRequest<IMetadataSchemaspaceResource>(\n      ELYRA_METADATA_API_ENDPOINT + schemaspace\n    ).then((response) => response?.[schemaspace]);\n  }\n\n  /**\n   * Service function for making POST calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param requestBody - the body of the request\n   *\n   * @returns a promise that resolves with the newly created metadata or\n   * an error dialog result\n   */\n  static async postMetadata(\n    schemaspace: string,\n    requestBody: IMetadataResourceBody\n  ): Promise<IMetadataResource | undefined> {\n    return RequestHandler.makePostRequest<IMetadataResource>(\n      ELYRA_METADATA_API_ENDPOINT + schemaspace,\n      JSON.stringify(requestBody)\n    );\n  }\n\n  /**\n   * Service function for making PUT calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param name - the metadata name being updated\n   * @param requestBody - the body of the request\n   *\n   * @returns a promise that resolves with the updated metadata or\n   * an error dialog result\n   */\n  static async putMetadata(\n    schemaspace: string,\n    name: string,\n    requestBody: IMetadataResourceBody\n  ): Promise<IMetadataResource | undefined> {\n    return RequestHandler.makePutRequest<IMetadataResource>(\n      `${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`,\n      JSON.stringify(requestBody)\n    );\n  }\n\n  /**\n   * Service function for making DELETE calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param name - the metadata name being updated\n   *\n   * @returns void or an error dialog result\n   */\n  static async deleteMetadata(\n    schemaspace: string,\n    name: string\n  ): Promise<void> {\n    await RequestHandler.makeDeleteRequest(\n      `${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`\n    );\n  }\n\n  private static schemaCache: IDictionary<ISchemaResource[]> = {};\n\n  /**\n   * Service function for making GET calls to the elyra schema API.\n   *\n   * @param schemaspace - the schema schemaspace being requested\n   *\n   * @returns a promise that resolves with the requested schemas or\n   * an error dialog result\n   */\n  static async getSchema(\n    schemaspace: string\n  ): Promise<ISchemaResource[] | undefined> {\n    if (this.schemaCache[schemaspace]) {\n      // Deep copy cached schema to mimic request call\n      return JSON.parse(JSON.stringify(this.schemaCache[schemaspace]));\n    }\n\n    return RequestHandler.makeGetRequest<ISchemaSchemaspaceResource>(\n      ELYRA_SCHEMA_API_ENDPOINT + schemaspace\n    ).then((response) => {\n      if (response?.[schemaspace]) {\n        this.schemaCache[schemaspace] = response[schemaspace];\n      }\n\n      return response?.[schemaspace];\n    });\n  }\n\n  /**\n   * Service function for making GET calls to the elyra schema API.\n   *\n   * @returns a promise that resolves with the requested schemas or\n   * an error dialog result\n   */\n  static async getAllSchema(): Promise<ISchemaResource[] | undefined> {\n    try {\n      const response =\n        await RequestHandler.makeGetRequest<ISchemaspacesResource>(\n          ELYRA_SCHEMASPACE_API_ENDPOINT\n        );\n      const schemas: ISchemaResource[] = [];\n\n      for (const schemaspace of response?.schemaspaces ?? []) {\n        const schema = await this.getSchema(schemaspace);\n        if (schema) {\n          schemas.push(...schema);\n        }\n      }\n      return schemas;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RequestHandler } from './requests';\nimport { IContentsPropertiesResource } from './types';\n\nconst ELYRA_FILE_PARSER_API_ENDPOINT = 'elyra/contents/properties/';\n\n/**\n * An interface for typing json dictionaries in typescript\n */\nexport interface IDictionary<T> {\n  [key: string]: T;\n}\n\n/**\n * A utilities class for parsing notebook files.\n */\nexport class ContentParser {\n  /**\n   * Takes in a file_path and finds all env vars accessed in that file.\n   * @param file_path - relative path to file\n   * @returns A string array of the env vars accessed in the given file\n   */\n  static async getEnvVars(file_path: string): Promise<string[]> {\n    try {\n      const response =\n        await RequestHandler.makeGetRequest<IContentsPropertiesResource>(\n          ELYRA_FILE_PARSER_API_ENDPOINT + file_path\n        );\n      // Only return environment var names (not values)\n      return Object.keys(response?.env_vars ?? {});\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dialog } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n\nimport { IElyraResource } from './types';\n\n/**\n * A service class for making requests to the jupyter lab server.\n */\nexport class RequestHandler {\n  /**\n   * Make a GET request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeGetRequest<T = IElyraResource>(\n    requestPath: string,\n    longRequestDialog?: Dialog<void>\n  ): Promise<T | undefined> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'GET' },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a POST request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestBody - The body of the request.\n   * Will be included in the RequestInit object passed to `makeServerRequest`\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makePostRequest<T = IElyraResource>(\n    requestPath: string,\n    requestBody: RequestInit['body'],\n    longRequestDialog?: Dialog<void>\n  ): Promise<T | undefined> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'POST', body: requestBody },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a PUT request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestBody - The body of the request.\n   * Will be included in the RequestInit object passed to `makeServerRequest`\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makePutRequest<T = IElyraResource>(\n    requestPath: string,\n    requestBody: RequestInit['body'],\n    longRequestDialog?: Dialog<void>\n  ): Promise<T | undefined> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'PUT', body: requestBody },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a DELETE request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeDeleteRequest<T = IElyraResource>(\n    requestPath: string,\n    longRequestDialog?: Dialog<void>\n  ): Promise<T | undefined> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'DELETE' },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a request to the jupyter lab server.\n   *\n   * The method of request is set in the `method` value in `requestInit`.\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestInit - The initialization options for the request.\n   * A RequestInit object to be passed directly to `ServerConnection.makeRequest`\n   * that must include a value for `method`.\n   * This is based on \"@typescript/lib/lib.dom.d/RequestInit\"\n   * @see {@link https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts#L1558}\n   * and {@link https://fetch.spec.whatwg.org/#requestinit}\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeServerRequest<T = IElyraResource>(\n    requestPath: string,\n    options: RequestInit & { type?: 'blob' | 'json' | 'text' },\n    longRequestDialog?: Dialog<void>\n  ): Promise<T | undefined> {\n    // use ServerConnection utility to make calls to Jupyter Based services\n    // which in this case are in the extension installed by this package\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, requestPath);\n\n    const { type = 'json', ...requestInit } = options;\n\n    console.log(`Sending a ${requestInit.method} request to ${requestUrl}`);\n\n    if (longRequestDialog) {\n      longRequestDialog.launch();\n    }\n\n    const getServerResponse = new Promise<T | undefined>((resolve, reject) => {\n      ServerConnection.makeRequest(requestUrl, requestInit, settings).then(\n        (response: Response) => {\n          if (longRequestDialog) {\n            longRequestDialog.resolve();\n          }\n\n          response[type]().then(\n            // handle cases where the server returns a valid response\n            (result) => {\n              if (response.status === 405) {\n                resolve(undefined);\n              }\n              if (response.status < 200 || response.status >= 300) {\n                return reject(result);\n              }\n\n              resolve(result);\n            },\n            // handle 404 if the server is not found\n            (reason) => {\n              if (response.status === 404 || response.status === 409) {\n                return reject({ ...response, requestPath: requestPath });\n              } else if (response.status === 204) {\n                resolve(undefined);\n              } else {\n                return reject(reason);\n              }\n            }\n          );\n        },\n        // something unexpected went wrong with the request\n        (reason) => {\n          console.error(reason);\n          return reject(reason);\n        }\n      );\n    });\n\n    const serverResponse = await getServerResponse;\n    return serverResponse;\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IDictionary } from './parsing';\n\n// Types extracted from `elyra/api/elyra.yaml`\n\nexport interface IElyraResource {}\n\nexport interface IMetadataResourceBody {\n  display_name: string;\n  schema_name: string;\n  metadata: IDictionary<unknown>;\n}\n\nexport interface IMetadataResource\n  extends IElyraResource,\n    IMetadataResourceBody {\n  name: string;\n}\n\nexport interface ISchemaspaceResource extends IElyraResource {\n  name: string;\n  id: string;\n  display_name: string;\n  description: string;\n}\n\nexport interface ISchemaResource extends IElyraResource {\n  schemaspace: string;\n  name: string;\n  title?: string;\n  properties?: IDictionary<unknown>;\n  uihints?: {\n    title: string;\n    icon: string;\n    reference_url: string;\n  };\n}\n\nexport interface IMetadataSchemaspaceResource extends IElyraResource {\n  [schemaspace: string]: IMetadataResource[];\n}\n\nexport interface ISchemaSchemaspaceResource extends IElyraResource {\n  [schemaspace: string]: ISchemaResource[];\n}\n\nexport interface ISchemaspacesResource extends IElyraResource {\n  schemaspaces: string[];\n}\n\nexport interface IComponentCacheResource extends IElyraResource {\n  action: 'refresh';\n}\n\nexport interface IContentsPropertiesResource extends IElyraResource {\n  env_vars: Record<string, string | null>;\n  inputs: Array<string>;\n  outputs: Array<string>;\n}\n"],"names":[],"sourceRoot":""}