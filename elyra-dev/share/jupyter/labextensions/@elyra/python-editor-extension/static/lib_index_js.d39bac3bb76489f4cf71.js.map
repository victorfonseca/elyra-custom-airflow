{"version":3,"file":"lib_index_js.d39bac3bb76489f4cf71.js","mappings":"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","sources":["webpack://@elyra/python-editor-extension/./src/PythonEditor.tsx","webpack://@elyra/python-editor-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ScriptEditor } from '@elyra/script-editor';\n\nimport { DocumentRegistry, DocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\nimport { LabIcon, pythonIcon } from '@jupyterlab/ui-components';\n\nexport class PythonEditor extends ScriptEditor {\n  /**\n   * Construct a new Python Editor widget.\n   */\n  constructor(\n    options: DocumentWidget.IOptions<FileEditor, DocumentRegistry.ICodeModel>\n  ) {\n    super(options);\n  }\n  getLanguage(): string {\n    return 'python';\n  }\n\n  getIcon(): LabIcon {\n    return pythonIcon;\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScriptEditorWidgetFactory, ScriptEditor } from '@elyra/script-editor';\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\nimport { WidgetTracker, ICommandPalette } from '@jupyterlab/apputils';\nimport { /*CodeEditor,*/ IEditorServices } from '@jupyterlab/codeeditor';\nimport {\n  IDocumentWidget,\n  DocumentRegistry,\n  DocumentWidget\n} from '@jupyterlab/docregistry';\nimport { IDefaultFileBrowser } from '@jupyterlab/filebrowser';\nimport { FileEditor, IEditorTracker } from '@jupyterlab/fileeditor';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { pythonIcon } from '@jupyterlab/ui-components';\n\nimport { JSONObject } from '@lumino/coreutils';\n\n//import IDisposable from '@lumino/signaling';\n\nimport { PythonEditor } from './PythonEditor';\n// import { default } from '../../../tests/plugins/index';\n\nconst PYTHON_FACTORY = 'Python Editor';\nconst PYTHON = 'python';\nconst PYTHON_EDITOR_NAMESPACE = 'elyra-python-editor-extension';\n\nconst commandIDs = {\n  createNewPythonEditor: 'script-editor:create-new-python-editor',\n  openDocManager: 'docmanager:open',\n  newDocManager: 'docmanager:new-untitled'\n};\n\ninterface IMyCodeEditorConfig {\n  autoClosingBrackets: boolean;\n  codeFolding: boolean;\n  fontFamily: string | null;\n  fontSize: number | null;\n  handlePaste: boolean;\n  insertSpaces: boolean;\n  lineHeight: number | null;\n  lineNumbers: boolean;\n  lineWrap: 'off' | 'on' | 'wordWrapColumn' | 'bounded';\n  matchBrackets: boolean;\n  readOnly: boolean;\n  rulers: Array<number>;\n  tabSize: number;\n  wordWrapColumn: number;\n}\n\nconst defaultConfig: IMyCodeEditorConfig = {\n  fontFamily: null,\n  fontSize: null,\n  lineHeight: null,\n  lineNumbers: false,\n  lineWrap: 'on',\n  wordWrapColumn: 80,\n  readOnly: false,\n  tabSize: 4,\n  insertSpaces: true,\n  matchBrackets: true,\n  autoClosingBrackets: true,\n  handlePaste: true,\n  rulers: [],\n  codeFolding: false\n};\n\n/**\n * Initialization data for the python-editor-extension extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: PYTHON_EDITOR_NAMESPACE,\n  autoStart: true,\n  requires: [\n    IEditorServices,\n    IEditorTracker,\n    ICommandPalette,\n    ISettingRegistry,\n    IDefaultFileBrowser\n  ],\n  optional: [ILayoutRestorer, IMainMenu, ILauncher],\n  activate: (\n    app: JupyterFrontEnd,\n    editorServices: IEditorServices,\n    editorTracker: IEditorTracker,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry,\n    browserFactory: IDefaultFileBrowser,\n    restorer: ILayoutRestorer | null,\n    menu: IMainMenu | null,\n    launcher: ILauncher | null\n  ) => {\n    console.log('Elyra - python-editor extension is activated!');\n\n    const factory = new ScriptEditorWidgetFactory({\n      editorServices,\n      factoryOptions: {\n        name: PYTHON_FACTORY,\n        fileTypes: [PYTHON],\n        defaultFor: [PYTHON]\n      },\n      instanceCreator: (\n        options: DocumentWidget.IOptions<\n          FileEditor,\n          DocumentRegistry.ICodeModel\n        >\n      ): ScriptEditor => new PythonEditor(options)\n    });\n\n    app.docRegistry.addFileType({\n      name: PYTHON,\n      displayName: 'Python File',\n      extensions: ['.py'],\n      pattern: '.*\\\\.py$',\n      mimeTypes: ['text/x-python'],\n      icon: pythonIcon\n    });\n\n    const { restored } = app;\n\n    /**\n     * Track PythonEditor widget on page refresh\n     */\n    const tracker = new WidgetTracker<ScriptEditor>({\n      namespace: PYTHON_EDITOR_NAMESPACE\n    });\n\n    let config: IMyCodeEditorConfig = { ...defaultConfig };\n\n    if (restorer) {\n      // Handle state restoration\n      void restorer.restore(tracker, {\n        command: commandIDs.openDocManager,\n        args: (widget) => ({\n          path: widget.context.path,\n          factory: PYTHON_FACTORY\n        }),\n        name: (widget) => widget.context.path\n      });\n    }\n\n    /**\n     * Update the setting values. Adapted from fileeditor-extension.\n     */\n    const updateSettings = (settings: ISettingRegistry.ISettings): void => {\n      config = {\n        ...defaultConfig,\n        ...(settings.get('editorConfig').composite as JSONObject)\n      };\n\n      // Trigger a refresh of the rendered commands\n      app.commands.notifyCommandChanged();\n    };\n\n    /**\n     * Update the settings of the current tracker instances. Adapted from fileeditor-extension.\n     */\n    const updateTracker = (): void => {\n      tracker.forEach((widget) => {\n        updateWidget(widget);\n      });\n    };\n\n    /**\n     * Update the settings of a widget. Adapted from fileeditor-extension.\n     */\n    const updateWidget = (widget: ScriptEditor): void => {\n      if (!editorTracker.has(widget)) {\n        (editorTracker as WidgetTracker<IDocumentWidget<FileEditor>>).add(\n          widget\n        );\n      }\n\n      const editor = widget.content.editor;\n      Object.keys(config).forEach((keyStr: string) => {\n        const key = keyStr as keyof IMyCodeEditorConfig;\n        editor.setOption(key, config[key]);\n      });\n    };\n\n    // Fetch the initial state of the settings. Adapted from fileeditor-extension.\n    Promise.all([\n      settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n      restored\n    ])\n      .then(([settings]) => {\n        updateSettings(settings);\n        updateTracker();\n        settings.changed.connect(() => {\n          updateSettings(settings);\n          updateTracker();\n        });\n      })\n      .catch((reason: Error) => {\n        console.error(reason.message);\n        updateTracker();\n      });\n\n    app.docRegistry.addWidgetFactory(factory);\n\n    factory.widgetCreated.connect((_sender, widget) => {\n      void tracker.add(widget);\n\n      // Notify the widget tracker if restore data needs to update\n      widget.context.pathChanged.connect(() => {\n        void tracker.save(widget);\n      });\n      updateWidget(widget);\n    });\n\n    // Handle the settings of new widgets. Adapted from fileeditor-extension.\n    tracker.widgetAdded.connect((_sender, widget) => {\n      updateWidget(widget);\n    });\n\n    /**\n     * Create new python editor from launcher and file menu\n     */\n\n    // Add a python launcher\n    if (launcher) {\n      launcher.add({\n        command: commandIDs.createNewPythonEditor,\n        category: 'Elyra',\n        rank: 4\n      });\n    }\n\n    if (menu) {\n      // Add new python editor creation to the file menu\n      menu.fileMenu.newMenu.addGroup(\n        [{ command: commandIDs.createNewPythonEditor, args: { isMenu: true } }],\n        92\n      );\n    }\n\n    // Function to create a new untitled python file, given the current working directory\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- `app.commands.execute` returns a Promise<any>\n    const createNew = (cwd: string): Promise<any> => {\n      return app.commands\n        .execute(commandIDs.newDocManager, {\n          path: cwd,\n          type: 'file',\n          ext: '.py'\n        })\n        .then((model) => {\n          return app.commands.execute(commandIDs.openDocManager, {\n            path: model.path,\n            factory: PYTHON_FACTORY\n          });\n        });\n    };\n\n    // Add a command to create new Python editor\n    app.commands.addCommand(commandIDs.createNewPythonEditor, {\n      label: (args) =>\n        args['isPalette'] || args['isContextMenu']\n          ? 'New Python Editor'\n          : 'Python Editor',\n      caption: 'Create a new Python Editor',\n      icon: (args) => (args['isPalette'] ? undefined : pythonIcon),\n      execute: (args) => {\n        const cwd = args['cwd'] || browserFactory.model.path;\n        return createNew(cwd as string);\n      }\n    });\n\n    palette.addItem({\n      command: commandIDs.createNewPythonEditor,\n      args: { isPalette: true },\n      category: 'Elyra'\n    });\n\n    app.contextMenu.addItem({\n      command: commandIDs.createNewPythonEditor,\n      args: { isContextMenu: true },\n      selector: '.jp-DirListing-content',\n      rank: 200\n    });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}