{"version":3,"file":"lib_index_js.a9578f4824329adc2947.js","mappings":"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","sources":["webpack://@elyra/script-debugger-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScriptEditor } from '@elyra/script-editor';\nimport {\n  ILabShell,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { Debugger, IDebugger } from '@jupyterlab/debugger';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { KernelManager, Session, SessionManager } from '@jupyterlab/services';\nimport { Widget } from '@lumino/widgets';\n\n/**\n * Debugger plugin.\n * Adapted from JupyterLab debugger extension.\n * A plugin that provides visual debugging support for script editors.\n */\nconst scriptEditorDebuggerExtension: JupyterFrontEndPlugin<void> = {\n  id: 'elyra-script-debugger',\n  autoStart: true,\n  requires: [IDebugger, IEditorTracker],\n  optional: [ILabShell],\n  activate: (\n    app: JupyterFrontEnd,\n    debug: IDebugger,\n    editorTracker: IEditorTracker,\n    labShell: ILabShell | null\n  ) => {\n    console.log('Elyra - script-debugger extension is activated!');\n\n    const handler = new Debugger.Handler({\n      type: 'file',\n      shell: app.shell,\n      service: debug\n    });\n\n    const activeSessions: { [id: string]: Session.ISessionConnection } = {};\n    const kernelManager = new KernelManager();\n    const sessionManager = new SessionManager({\n      kernelManager: kernelManager\n    });\n\n    const updateDebugger = async (widget: ScriptEditor): Promise<void> => {\n      const widgetInFocus = app.shell.currentWidget;\n      if (widget !== widgetInFocus) {\n        return;\n      }\n\n      const kernelSelection = (widget as ScriptEditor).kernelSelection;\n\n      const sessions = app.serviceManager.sessions;\n      try {\n        const path = widget.context.path;\n        let sessionModel = await sessions.findByPath(path);\n        if (!sessionModel) {\n          // Start a kernel session for the selected kernel supporting debug\n          const sessionConnection = await startSession(kernelSelection, path);\n          sessionModel = await sessions.findByPath(path);\n          if (sessionConnection && sessionModel) {\n            activeSessions[sessionModel.id] = sessionConnection;\n          }\n        }\n        if (sessionModel) {\n          let sessionConnection: Session.ISessionConnection | null =\n            activeSessions[sessionModel.id];\n          if (!sessionConnection) {\n            // Use `connectTo` only if the session does not exist.\n            // `connectTo` sends a kernel_info_request on the shell\n            // channel, which blocks the debug session restore when waiting\n            // for the kernel to be ready\n            sessionConnection = sessions.connectTo({ model: sessionModel });\n            activeSessions[sessionModel.id] = sessionConnection;\n          }\n\n          await updateKernel(sessionConnection, kernelSelection);\n\n          // Temporary solution to give enough time for the handler to update the UI on page reload.\n          setTimeout(async () => {\n            await handler.update(widget, sessionConnection);\n            app.commands.notifyCommandChanged();\n          }, 500);\n        }\n      } catch (error) {\n        console.warn(\n          'Exception: session connection = ' + JSON.stringify(error)\n        );\n      }\n    };\n\n    // Use a weakmap to track the callback function used by signal listeners\n    // The object is cleared by garbabe collector when no longer in use avoiding memory leaks\n    // Key: ScriptEditor widget\n    // Value: instance of updateDebugger function\n    const callbackControl = new WeakMap<ScriptEditor, () => Promise<void>>();\n\n    const update = async (widget: Widget | null): Promise<void> => {\n      if (widget instanceof ScriptEditor) {\n        let callbackFn = callbackControl.get(widget);\n        if (!callbackFn) {\n          callbackFn = (): Promise<void> => updateDebugger(widget);\n          callbackControl.set(widget, callbackFn);\n        }\n        updateDebugger(widget);\n\n        // Listen to possible kernel selection changes\n        widget.kernelSelectionChanged.disconnect(callbackFn);\n        widget.kernelSelectionChanged.connect(callbackFn);\n      }\n    };\n\n    if (labShell) {\n      // Listen to main area's current focus changes.\n      labShell.currentChanged.connect((_, widget) => {\n        return update(widget.newValue);\n      });\n    }\n\n    if (editorTracker) {\n      // Listen to script editor's current instance changes.\n      editorTracker.currentChanged.connect((_, widget) => {\n        return update(widget);\n      });\n    }\n\n    const startSession = async (\n      kernelSelection: string,\n      path: string\n    ): Promise<Session.ISessionConnection | null> => {\n      const options: Session.ISessionOptions = {\n        kernel: {\n          name: kernelSelection\n        },\n        path: path,\n        type: 'file',\n        name: path\n      };\n      let sessionConnection: Session.ISessionConnection | null = null;\n      try {\n        if (kernelSelection) {\n          sessionConnection = await sessionManager.startNew(options);\n          sessionConnection.setPath(path);\n          console.log(`Kernel session started for ${kernelSelection} kernel`);\n        }\n      } catch (error) {\n        console.warn('Exception: start session = ' + JSON.stringify(error));\n      }\n      return sessionConnection;\n    };\n\n    const updateKernel = async (\n      sessionConnection: Session.ISessionConnection,\n      kernelSelection: string\n    ): Promise<void> => {\n      try {\n        const prev = sessionConnection.kernel?.name;\n        if (kernelSelection && prev !== kernelSelection) {\n          await sessionConnection.changeKernel({ name: kernelSelection });\n          console.log(`Kernel change from ${prev} to ${kernelSelection}`);\n        }\n      } catch (error) {\n        console.warn('Exception: change kernel = ' + JSON.stringify(error));\n      }\n    };\n  }\n};\n\nexport default scriptEditorDebuggerExtension;\n"],"names":[],"sourceRoot":""}