{"version":3,"file":"624.f7b28e1681959f765f79.js?v=f7b28e1681959f765f79","mappings":"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","sources":["webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/history.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/jumper.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/fileeditor.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/notebook.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/notebook_private.ts"],"sourcesContent":["import { IGlobalPosition } from './positions';\n\nconst DATABASE: Array<IGlobalPosition> = [];\n\nexport class JumpHistory {\n  store(position: IGlobalPosition) {\n    DATABASE.push(position);\n  }\n\n  // TODO: recollect should take a param with current position;\n  // It shold only go back if current contents_path is the same\n  // as the last one on the stack (or a previous disjoint one).\n  // Probably the jump paths should not be in an array of arrays.\n  recollect(): IGlobalPosition | undefined {\n    return DATABASE.pop();\n  }\n}\n","import { EditorView } from '@codemirror/view';\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\n\nimport { JumpHistory } from '../history';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nconst movementKeys = [\n  'ArrowRight',\n  'ArrowLeft',\n  'ArrowUp',\n  'ArrowDown',\n  'Home',\n  'End',\n  'PageUp',\n  'PageDown'\n];\n\nconst modifiers = ['Alt', 'AltGraph', 'Control', 'Shift'];\n\nconst systemKeys = [\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12',\n  'ContextMenu'\n];\n\nexport abstract class CodeJumper {\n  documentManager: IDocumentManager;\n  widget: IDocumentWidget;\n\n  history: JumpHistory;\n\n  abstract get editors(): ReadonlyArray<CodeEditor.IEditor>;\n\n  private goToPosition(\n    documentWidget: IDocumentWidget,\n    jumper: string,\n    column: number,\n    lineNumber: number,\n    inputNumber = 0\n  ) {\n    let documentJumper: CodeJumper;\n    let position = { line: lineNumber, column: column };\n    let documentJumperType = jumpers.get(jumper);\n\n    documentJumper = new documentJumperType(\n      documentWidget,\n      this.documentManager\n    );\n    let jumpPosition = documentJumper.getJumpPosition(position, inputNumber);\n    documentJumper.jump(jumpPosition);\n  }\n\n  private _globalJump(position: IGlobalPosition) {\n    let documentWidget = this.documentManager.openOrReveal(\n      position.contentsPath\n    );\n    if (!documentWidget) {\n      console.log('Widget failed to open for jump');\n      return;\n    }\n    let isSymlink = position.isSymlink;\n\n    documentWidget.revealed\n      .then(() => {\n        this.goToPosition(\n          documentWidget!,\n          position.contentsPath.endsWith('.ipynb') ? 'notebook' : 'fileeditor',\n          position.column,\n          position.line,\n          position.editorIndex\n        );\n\n        // protect external files from accidental edition\n        if (isSymlink) {\n          this.protectFromAccidentalEditing(documentWidget!);\n        }\n      })\n      .catch(console.warn);\n  }\n\n  private protectFromAccidentalEditing(documentWidget: IDocumentWidget) {\n    let editorWidget = documentWidget as IDocumentWidget<FileEditor>;\n    // We used to adjust `editorWidget.title.label` here but an upstream\n    // bug (https://github.com/jupyterlab/jupyterlab/issues/10856) prevents\n    // us from doing so anymore.\n    let editor = editorWidget.content.editor;\n    let active = true;\n    editor.injectExtension(\n      EditorView.domEventHandlers({\n        keydown: (event: KeyboardEvent) => {\n          if (!active) {\n            return false;\n          }\n          // allow to move around, select text and use modifiers & browser keys freely\n          if (\n            movementKeys.indexOf(event.key) !== -1 ||\n            modifiers.indexOf(event.key) !== -1 ||\n            systemKeys.indexOf(event.key) !== -1\n          ) {\n            return false;\n          }\n\n          // allow to copy text (here assuming that, as on majority of OSs, copy is associated with ctrl+c)\n          // this is not foolproof, but should work in majority of sane settings (unfortunately, not in vim)\n          if (event.key === 'c' && event.ctrlKey) {\n            return false;\n          }\n\n          let dialogPromise = showDialog({\n            title: 'Edit external file?',\n            body:\n              'This file is located outside of the root of the JupyterLab start directory. ' +\n              'do you really wish to edit it?',\n            buttons: [\n              Dialog.cancelButton({ label: 'Cancel' }),\n              Dialog.warnButton({ label: 'Edit anyway' })\n            ]\n          });\n\n          dialogPromise\n            .then(result => {\n              if (result.button.accept) {\n                active = false;\n              }\n            })\n            .catch(console.warn);\n\n          // prevent default\n          return true;\n        }\n      })\n    );\n  }\n\n  protected abstract jump(position: ILocalPosition): void;\n\n  globalJumpBack() {\n    let previousPosition = this.history.recollect();\n    if (previousPosition) {\n      this._globalJump(previousPosition);\n    }\n  }\n\n  globalJump(position: IGlobalPosition) {\n    const currentPosition = this.getCurrentPosition();\n    this.history.store(currentPosition);\n    this._globalJump(position);\n  }\n\n  abstract getCurrentPosition(): IGlobalPosition;\n\n  abstract getOffset(position: CodeEditor.IPosition, cell?: number): number;\n\n  abstract getJumpPosition(\n    position: CodeEditor.IPosition,\n    inputNumber?: number\n  ): ILocalPosition;\n}\n\nexport let jumpers: Map<string, any> = new Map();\n","import { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\n\nimport { JumpHistory } from '../history';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nimport { CodeJumper, jumpers } from './jumper';\n\nexport class FileEditorJumper extends CodeJumper {\n  editor: FileEditor;\n  widget: IDocumentWidget;\n\n  constructor(\n    editorWidget: IDocumentWidget<FileEditor>,\n    documentManager: IDocumentManager\n  ) {\n    super();\n    this.widget = editorWidget;\n    this.documentManager = documentManager;\n    this.editor = editorWidget.content;\n    this.history = new JumpHistory();\n  }\n\n  get path() {\n    return this.widget.context.path;\n  }\n\n  get editors() {\n    return [this.editor.editor];\n  }\n\n  jump(jumpPosition: ILocalPosition) {\n    let { token } = jumpPosition;\n\n    // TODO: this is common\n    // place cursor in the line with the definition\n    let position = this.editor.editor.getPositionAt(token.offset)!;\n    this.editor.editor.setSelection({ start: position, end: position });\n    this.editor.editor.focus();\n  }\n\n  getOffset(position: CodeEditor.IPosition) {\n    return this.editor.editor.getOffsetAt(position);\n  }\n\n  getJumpPosition(position: CodeEditor.IPosition): ILocalPosition {\n    return {\n      token: {\n        offset: this.getOffset(position),\n        value: ''\n      },\n      index: 0\n    };\n  }\n\n  getCurrentPosition(): IGlobalPosition {\n    let position = this.editor.editor.getCursorPosition();\n    return {\n      editorIndex: 0,\n      line: position.line,\n      column: position.column,\n      contentsPath: this.editor.context.path,\n      isSymlink: false\n    };\n  }\n}\n\njumpers.set('fileeditor', FileEditorJumper);\n","import { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\n\nimport { JumpHistory } from '../history';\nimport { _ensureFocus } from '../notebook_private';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nimport { CodeJumper, jumpers } from './jumper';\n\nexport class NotebookJumper extends CodeJumper {\n  notebook: Notebook;\n  widget: NotebookPanel;\n\n  constructor(\n    notebookWidget: NotebookPanel,\n    documentManager: IDocumentManager\n  ) {\n    super();\n    this.widget = notebookWidget;\n    this.notebook = notebookWidget.content;\n    this.history = new JumpHistory();\n    this.documentManager = documentManager;\n  }\n\n  get editors() {\n    return this.notebook.widgets.map(cell => cell.editor!);\n  }\n\n  jump(position: ILocalPosition) {\n    let { token, index } = position;\n\n    // Prevents event propagation issues\n    setTimeout(() => {\n      this.notebook.deselectAll();\n      this.notebook.activeCellIndex = index!;\n      _ensureFocus(this.notebook);\n      this.notebook.mode = 'edit';\n\n      // find out offset for the element\n      let activeEditor = this.notebook.activeCell!.editor!;\n\n      // place cursor in the line with the definition\n      let position = activeEditor.getPositionAt(token.offset)!;\n      activeEditor.setSelection({ start: position, end: position });\n    }, 0);\n  }\n\n  getOffset(position: CodeEditor.IPosition, cell: number = 0) {\n    return this.editors[cell].getOffsetAt(position);\n  }\n\n  getCurrentPosition(): IGlobalPosition {\n    let position =\n      this.editors[this.notebook.activeCellIndex].getCursorPosition();\n\n    return {\n      editorIndex: this.notebook.activeCellIndex,\n      line: position.line,\n      column: position.column,\n      contentsPath: this.widget.context.path,\n      isSymlink: false\n    };\n  }\n\n  getJumpPosition(position: CodeEditor.IPosition, inputNumber: number) {\n    return {\n      token: {\n        offset: this.getOffset(position, inputNumber),\n        value: ''\n      },\n      index: inputNumber\n    };\n  }\n}\n\njumpers.set('notebook', NotebookJumper);\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Notebook } from '@jupyterlab/notebook';\n\n/**\n * Ensure that the notebook has proper focus.\n */\nfunction _ensureFocus(notebook: Notebook, force = false): void {\n  let activeCell = notebook.activeCell;\n  if (notebook.mode === 'edit' && activeCell && activeCell.editor) {\n    if (!activeCell.editor.hasFocus()) {\n      activeCell.editor.focus();\n    }\n  }\n  if (force && !notebook.node.contains(document.activeElement)) {\n    notebook.node.focus();\n  }\n}\n\nexport { _ensureFocus };\n"],"names":["DATABASE","JumpHistory","store","position","push","recollect","pop","movementKeys","modifiers","systemKeys","CodeJumper","goToPosition","documentWidget","jumper","column","lineNumber","inputNumber","documentJumper","line","jumpers","get","this","documentManager","jumpPosition","getJumpPosition","jump","_globalJump","openOrReveal","contentsPath","console","log","isSymlink","revealed","then","endsWith","editorIndex","protectFromAccidentalEditing","catch","warn","editor","content","active","injectExtension","EditorView","domEventHandlers","keydown","event","indexOf","key","ctrlKey","showDialog","title","body","buttons","Dialog","cancelButton","label","warnButton","result","button","accept","globalJumpBack","previousPosition","history","globalJump","currentPosition","getCurrentPosition","Map","FileEditorJumper","constructor","editorWidget","super","widget","path","context","editors","token","getPositionAt","offset","setSelection","start","end","focus","getOffset","getOffsetAt","value","index","getCursorPosition","set","NotebookJumper","notebookWidget","notebook","widgets","map","cell","setTimeout","deselectAll","activeCellIndex","force","activeCell","mode","hasFocus","node","contains","document","activeElement","_ensureFocus","activeEditor"],"sourceRoot":""}